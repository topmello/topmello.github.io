"use strict";(self.webpackChunksettle_aid=self.webpackChunksettle_aid||[]).push([[7396],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={},r="DevOps - CI/CD \ud83d\ude80",l={unversionedId:"deployment/devops",id:"deployment/devops",title:"DevOps - CI/CD \ud83d\ude80",description:"Main Application Dockerfile",source:"@site/docs/deployment/devops.md",sourceDirName:"deployment",slug:"/deployment/devops",permalink:"/docs/deployment/devops",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deployment/devops.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment Introduction",permalink:"/docs/deployment/introduction"},next:{title:"Data Management Plan",permalink:"/docs/category/data-management-plan"}},s={},p=[{value:"Main Application Dockerfile",id:"main-application-dockerfile",level:2},{value:"Dockerfile.db",id:"dockerfiledb",level:2},{value:"Docker Compose Overview",id:"docker-compose-overview",level:2},{value:"Services:",id:"services",level:3},{value:"GitHub Actions Workflows",id:"github-actions-workflows",level:2},{value:"Python Application Test with Docker",id:"python-application-test-with-docker",level:3},{value:"Build and Push Images - Dockerhub",id:"build-and-push-images---dockerhub",level:3},{value:"Setting up GCP Compute Instance",id:"setting-up-gcp-compute-instance",level:2},{value:"Deploying on GCP",id:"deploying-on-gcp",level:2},{value:"Actions for Developers:",id:"actions-for-developers",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"devops---cicd-"},"DevOps - CI/CD \ud83d\ude80"),(0,i.kt)("h2",{id:"main-application-dockerfile"},"Main Application Dockerfile"),(0,i.kt)("p",null,"The main Dockerfile is structured to set up the environment for the Python application:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Base Image: Starts from the official Python image python:3.9.17-bullseye."),(0,i.kt)("li",{parentName:"ul"},"Non-root User: A non-root user named myuser is created for better security."),(0,i.kt)("li",{parentName:"ul"},"Working Directory: Sets /usr/src/app as the working directory inside the container."),(0,i.kt)("li",{parentName:"ul"},"Requirements Installation:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Copies the requirements.txt file to the container."),(0,i.kt)("li",{parentName:"ol"},"Installs the Python packages listed in requirements.txt using pip."))),(0,i.kt)("li",{parentName:"ul"},"Codebase Copy: All application code is then copied to the container's working directory."),(0,i.kt)("li",{parentName:"ul"},"File Ownership & Directories:",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Changes the ownership of the working directory to myuser."),(0,i.kt)("li",{parentName:"ol"},"Ensures certain special directories exist and are owned by myuser, such as .pytest_cache and the torch cache for sentence transformers."))),(0,i.kt)("li",{parentName:"ul"},"Default User: Switches to myuser so all commands run in the container will be executed as this user."),(0,i.kt)("li",{parentName:"ul"},"Default Command: The default command starts the application using uvicorn with the appropriate parameters.")),(0,i.kt)("h2",{id:"dockerfiledb"},"Dockerfile.db"),(0,i.kt)("p",null,"This Dockerfile is tailored for the PostgreSQL setup with vector extensions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Base Image: Uses ankane/pgvector as the base, specialized for vector operations in PostgreSQL."),(0,i.kt)("li",{parentName:"ul"},"PostGIS Extension: PostGIS, a spatial database extension for PostgreSQL, is installed to enable geographical functionalities."),(0,i.kt)("li",{parentName:"ul"},"Default Command: Specifies the default command to start PostgreSQL.")),(0,i.kt)("h2",{id:"docker-compose-overview"},"Docker Compose Overview"),(0,i.kt)("h3",{id:"services"},"Services:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"db (PostgreSQL)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Docker Image: jirathipk/postgres-vec-geo:latest"),(0,i.kt)("li",{parentName:"ul"},"Purpose: Used for our main application database."),(0,i.kt)("li",{parentName:"ul"},"Credentials:"),(0,i.kt)("li",{parentName:"ul"},"Database: database"),(0,i.kt)("li",{parentName:"ul"},"User: db_user"),(0,i.kt)("li",{parentName:"ul"},"Password: password1234"),(0,i.kt)("li",{parentName:"ul"},"Storage: A volume named database_volume persists the database data.")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"redis")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Docker Image: redis:latest"),(0,i.kt)("li",{parentName:"ul"},"Purpose: Redis server for caching and other in-memory tasks."),(0,i.kt)("li",{parentName:"ul"},"Password: topmelloredis"),(0,i.kt)("li",{parentName:"ul"},"Storage: A volume named redis_volume is used to persist the Redis data.")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"backend")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Docker Image: jirathipk/settle-aid-backend:latest"),(0,i.kt)("li",{parentName:"ul"},"Purpose: Main application."),(0,i.kt)("li",{parentName:"ul"},"Port Mapping: Host's 8000 is mapped to container's 8000."),(0,i.kt)("li",{parentName:"ul"},"Dependencies: Relies on db and redis services to be running."),(0,i.kt)("li",{parentName:"ul"},"Credentials & Config: The environment section contains credentials and configurations.")),(0,i.kt)("h2",{id:"github-actions-workflows"},"GitHub Actions Workflows"),(0,i.kt)("h3",{id:"python-application-test-with-docker"},"Python Application Test with Docker"),(0,i.kt)("p",null,"This workflow is triggered whenever there's a push to our main branch. It:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Checks out repository."),(0,i.kt)("li",{parentName:"ol"},"Builds and starts Docker Compose services using the dev configuration."),(0,i.kt)("li",{parentName:"ol"},"Runs pytest within backend service."),(0,i.kt)("li",{parentName:"ol"},"Shuts down and removes the containers afterward.")),(0,i.kt)("h3",{id:"build-and-push-images---dockerhub"},"Build and Push Images - Dockerhub"),(0,i.kt)("p",null,"Activated either manually or when there's a push to the deploy branch. The steps include:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Checking out repository."),(0,i.kt)("li",{parentName:"ol"},"Setting up QEMU & Docker Buildx."),(0,i.kt)("li",{parentName:"ol"},"Logging into Docker Hub using saved credentials."),(0,i.kt)("li",{parentName:"ol"},"Building Docker images from Dockerfiles (Dockerfile.db & Dockerfile.backend)."),(0,i.kt)("li",{parentName:"ol"},"Pushing these images to Docker Hub.")),(0,i.kt)("h2",{id:"setting-up-gcp-compute-instance"},"Setting up GCP Compute Instance"),(0,i.kt)("p",null,"Before deploying on GCP, ensure the VM instance ready. To set up a VM instance:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to the GCP Console at ",(0,i.kt)("a",{parentName:"li",href:"https://console.cloud.google.com/"},"https://console.cloud.google.com/"),"."),(0,i.kt)("li",{parentName:"ol"},"Navigate to the Compute Engine and then VM Instances."),(0,i.kt)("li",{parentName:"ol"},'Click on "Create Instance."'),(0,i.kt)("li",{parentName:"ol"},"Fill out the necessary details like Name, Region, Zone, Machine type, etc."),(0,i.kt)("li",{parentName:"ol"},"In the Boot Disk section, select an Ubuntu as OS."),(0,i.kt)("li",{parentName:"ol"},"Under the Firewall settings, make sure to allow HTTP and HTTPS traffic if your application needs to be accessed over the internet."),(0,i.kt)("li",{parentName:"ol"},'Once filled out, click "Create" to instantiate your VM.'),(0,i.kt)("li",{parentName:"ol"},"SSH into the instance and install Docker and Docker Compose. The instructions can be found here: ",(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/ubuntu/"},"https://docs.docker.com/engine/install/ubuntu/")),(0,i.kt)("li",{parentName:"ol"},"Set up NGINX for reverse proxy in the instance.\n9.1 Install NGINX: ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo apt install nginx"),"\n9.2 Create a new file in /etc/nginx/sites-available/ and name it settle-aid\n9.3 Copy the following configuration into the file:\n",(0,i.kt)("inlineCode",{parentName:"li"},"to be filled in later"),"\n9.4 Create a symbolic link to the file in /etc/nginx/sites-enabled/:\n",(0,i.kt)("inlineCode",{parentName:"li"},"sudo ln -s /etc/nginx/sites-available/settle-aid /etc/nginx/sites-enabled/"),"\n9.5 Test the configuration and restart NGINX:\n",(0,i.kt)("inlineCode",{parentName:"li"},"sudo nginx -t"),(0,i.kt)("inlineCode",{parentName:"li"},"sudo systemctl restart nginx"))),(0,i.kt)("h2",{id:"deploying-on-gcp"},"Deploying on GCP"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SSH into GCP Instance: ",(0,i.kt)("inlineCode",{parentName:"li"},"gcloud compute ssh <instance-name> --zone <zone>")),(0,i.kt)("li",{parentName:"ul"},"Change directory: ",(0,i.kt)("inlineCode",{parentName:"li"},"cd ..")),(0,i.kt)("li",{parentName:"ul"},"Pull the Latest Docker Compose Configuration: ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo docker-compose pull")),(0,i.kt)("li",{parentName:"ul"},"Start the Containers: ",(0,i.kt)("inlineCode",{parentName:"li"},"sudo docker-compose -p settle-aid up -d"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The -p flag is to set a project name, which can be useful for running multiple environments on the same host"),(0,i.kt)("li",{parentName:"ul"},"The -d flag is to run the containers in the background")))),(0,i.kt)("h2",{id:"actions-for-developers"},"Actions for Developers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Modifications: If there are modifications or additions to packages, update requirements.txt so the Docker build process incorporates these changes."),(0,i.kt)("li",{parentName:"ul"},"GitHub Workflows: The Python application test runs on pushes to the main branch, and the Dockerhub build and push are triggered either manually or when pushing to the deploy branch.")))}d.isMDXComponent=!0}}]);