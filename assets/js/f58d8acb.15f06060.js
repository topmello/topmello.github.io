"use strict";(self.webpackChunksettle_aid=self.webpackChunksettle_aid||[]).push([[6602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Search",s={unversionedId:"backend/search",id:"backend/search",title:"Search",description:"This module provides endpoints related to searching for locations based on user queries. It supports both single and sequence-based search queries.",source:"@site/docs/backend/search.md",sourceDirName:"backend",slug:"/backend/search",permalink:"/docs/backend/search",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/backend/search.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Schema",permalink:"/docs/backend/schema"},next:{title:"API Documentation Page",permalink:"/docs/backend/swagger"}},l={},u=[{value:"Dependencies",id:"dependencies",level:2},{value:"Global Variables",id:"global-variables",level:2},{value:"Utility Functions",id:"utility-functions",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Search by Query Sequence Endpoint (/route/)",id:"search-by-query-sequence-endpoint-route",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"search"},"Search"),(0,a.kt)("p",null,"This module provides endpoints related to searching for locations based on user queries. It supports both single and sequence-based search queries."),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fastapi: The main framework used for building the API."),(0,a.kt)("li",{parentName:"ul"},"sqlalchemy: Provides ORM functionalities and SQL query building."),(0,a.kt)("li",{parentName:"ul"},"geoalchemy2: Used for handling geographic objects in the database."),(0,a.kt)("li",{parentName:"ul"},"numpy: Used for numerical operations."),(0,a.kt)("li",{parentName:"ul"},"sentence_transformers: Used for encoding sentences into embeddings."),(0,a.kt)("li",{parentName:"ul"},"schemas, models, oauth2: Internal modules containing data schemas, database models, and OAuth2 utilities respectively.")),(0,a.kt)("h2",{id:"global-variables"},"Global Variables"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"router: The APIRouter instance for the search endpoints, prefixed with /search."),(0,a.kt)("li",{parentName:"ul"},"model: A SentenceTransformer model used for encoding queries into embeddings."),(0,a.kt)("li",{parentName:"ul"},"LOCATION_TYPE_MODELS: A dictionary mapping location types to their respective database models."),(0,a.kt)("li",{parentName:"ul"},"PROMPT_LOCATION_TYPE_MODELS: A dictionary mapping location types to their respective prompt-location database models.")),(0,a.kt)("h2",{id:"utility-functions"},"Utility Functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"softmax(x): Computes the softmax values for a set of scores.")),(0,a.kt)("h2",{id:"endpoints"},"Endpoints"),(0,a.kt)("h3",{id:"search-by-query-sequence-endpoint-route"},"Search by Query Sequence Endpoint (/route/)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Method: POST"),(0,a.kt)("li",{parentName:"ul"},"Input: querys (containing a list of user queries, location types, distance threshold, similarity threshold, route type, and current location coordinates)"),(0,a.kt)("li",{parentName:"ul"},"Output: A route based on the sequence of search results."),(0,a.kt)("li",{parentName:"ul"},"Description: Searches for a sequence of locations based on the user's queries. For each query, it finds a location that matches the query's embedding and then creates a route based on the sequence of found locations.")),(0,a.kt)("p",null,"Input Example:"),(0,a.kt)("p",null,'{"query":"Boring","location_type":"landmark","longitude":144.9549,"latitude":-37.81803,"distance_threshold":10000,"similarity_threshold":0.1}'),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create best route in terms of similarity using input as like of prompt")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Sample route using probabilities from similarity"))),(0,a.kt)("p",null,"Input Example:"),(0,a.kt)("p",null,'{"query":','["Chinese","Chinese","Chinese"]',',"location_type":','["landmark","restaurant","restaurant"]',',"longitude":144.9549,"latitude":-37.81803,"distance_threshold":1000,"similarity_threshold":0}'))}p.isMDXComponent=!0}}]);